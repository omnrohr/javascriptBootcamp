abstraction: it is a way to hide unnecessary methods of the user or the API or the interface.
encapsulation : is to keep some features and methods hidden form outside class.
polymorphism: child class can overwrite inherited a parent methods.
prototypes: - each object linked to a prototype object.
            - each object inherited the parent prototype methods.
            - behavior is delegated to linked prototype object.


crete prototype:
                - constructor function.
                    * technique to create object form function.
                    * this is the build in way like arrays implemented. 
                - ES classes.
                    * modern way.
                    * syntax sugar, it work exactly like constructor.
                    * it is not behave like normal OOP classes. 
                - object.crete().
                    * easiest and straightforward way of linking an object to a prototype.
                    

create class:
                - function decelerations and function expression are working to create class.
                - arrow function do not work, they do not have this keyword.
                - a class constructor is similar to function but we user new keyword.
                - if you add new keyword you are calling the constructor.

new operator:  
                - new empty object is created.
                - it will call the function.
                - set this keyword to the object that created.
                - object will linked to prototype.
                - the function will return automatically the object created.

creating object:
                - if you create a method directly inside the object you are copying 
                the same method to every new object and that is bad practice.
                - each function has a property called prototype even the constructor.
                - each object will inherit all methods from parent function prototype.
                
prototype:      
                - object prototype is find by object.__proto__.
                - to check prototype of instance and main class use object.__proto__ === class.prototype
                or class.prototype.isPrototypeOf(object).
                - to add a method to a class use class.prototype.methodName = function...
                - you can use this inside the method.
                - object __proto__ is the function prototype;
                - function __proto__ is native code.
                - object .prototype is undefined.
                - I can add and edit prototype and __proto__ for objects.
                - I can set object __proto__ to any type I want then the type methods
                can be called normally.


class keyword:
                - class keyword is a syntax sugar.
                - all methods in class will be kept inside the class only
                it will never coped to objects.
                - Class expression like class ClassName {}.
                - Class decelerations like const ClassName = class{}.
                - Classes are not hoisted 'means you can not use them before decelerations'.
                - Classes are first class citizens. 'means we can pass them into functions 
                and return them from functions'.
                - The class buddy is executed with strict mode even if you not mention that.

******************** getters and setters ********************

getters:        - To add getter to an literal 
                object {
                    property: 'something',
                    get behaviorName (args){
                        return this.property + action;
                    }
                }
                then call it directly like object.behaviorName; 
                without calling the method.
                so by adding get keyword to the behavior or method you convert it to getter.


setters:        - like getters with keyword set and one parameter.
                object {..... getter 
                set behaviorName(arg){
                    do something.
                    }
                }
                then call it like an property like this:
                object.behaviorName = value;
                remember you can not call it like a function and pass it the arg.
                so object.behaviorName(arg) is not valid.

static function:
                - to add a static method to literal object just add it as a property.
                object.methodName(){do something}.
                - to add a static method to a class, insert the method after static keyword
                static methodName(){do something};


create class with object.create() method:
                - It is similar to object literal, instead object literal using new keyword
                you will use Object.create(Object Name) like
                const objectName = { 
                    some property
                    some methods
                }
                const something = Object.create(objectName);
                this will add the something.__proto__ to objectName.
                then add other methods and property as object literal.


******************** add inheritance to classes ********************
Classes constructor: 
                - To add inheritance to class constructor method:
                inside the class constructor add the parent class with call or bind methods
                then add one more expression to the child class like so:
                const ChildClass = function (parentArgs, childArgs) {
                parentClass.bind(this)(ParentArgs);
                // or //
                Person.call(this, ParentArgs);
                this.childArgs = childArgs;
                };
                then connect child to parent prototypes like so:
                ChildClass.prototype = Object.create(ParentClass.prototype).
                or
                /// carefully the below methods I have came up with. 
                ChildClass.prototype = new Object(ParentClass.prototype).
                or 
                ChildClass.prototype = new ParentClass();
                now you can use ParentClass methods on child instances.

                - Fix ChildClass instance prototype, 
                change the property of ChildClass for constructor by:
                ChildClass.prototype.constructor = ChildClass;


Classes ES6:
                - similar to java call super then pass the args.
                - the difference is you need to call it constructor not the same ClassName.
